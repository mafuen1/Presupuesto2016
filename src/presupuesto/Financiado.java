/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presupuesto;

import dao.CuotaObject;
import dao.FinanciadoPagosObject;
import dao.PendientesObject;
import dao.PresupuestoDAO;
import dao.PresupuestoObject;
import dao.RubrosObject;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author MaFuen1
 */
public class Financiado extends javax.swing.JDialog {
    String path;
    String[] columnNames = {"ID","PLAN","FECHA COMPRA","RUBRO",
                        "TOTAL","TIPO PAGO","FEC. PAGO MINIMO","FEC. PAGO CONTADO"
                        };
    String rowData[][]; 
    PresupuestoObject presupuesto;
    RubrosObject rubros;
    
    ImageIcon sumatoriaicon;
    String imgpath;   
    
    
     CellEditorListener ChangeNotification = new CellEditorListener() {
        public void editingCanceled(ChangeEvent e) {
            System.out.println("The user canceled editing.");
        }

        public void editingStopped(ChangeEvent e) {
            System.out.println("The user stopped editing successfully.");
            modificar();
        }
    };    
    /**
     * Creates new form Financiado
     */
    public Financiado(java.awt.Frame parent, boolean modal,PresupuestoObject presupuesto) {
        
        super(parent, modal);
        initComponents();
       
        cargarPendientes();
        this.presupuesto=presupuesto;
        setLocationRelativeTo(null);
        jTable1.getDefaultEditor(String.class).addCellEditorListener(ChangeNotification);
                
        sumatoriaicon = new ImageIcon(getClass().getResource("/img/sumatoria.jpg"));
        btn_sumatoria.setIcon(sumatoriaicon);        
    }
    
  public Financiado() {             
        sumatoriaicon = new ImageIcon(getClass().getResource("/img/sumatoria.jpg"));
        btn_sumatoria.setIcon(sumatoriaicon);        
    }        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btn_insertar_gasto = new javax.swing.JButton();
        btn_eliminar_gasto = new javax.swing.JButton();
        btn_pagos = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lbl_rubros_financiados = new javax.swing.JLabel();
        btn_modificar = new javax.swing.JButton();
        btn_agregar_rubro_al_presupuesto = new javax.swing.JButton();
        btn_sumatoria = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmb_plan = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pendientes de pagar");

        jPanel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RUBRO", "PLAN", "CUOTAS PAGADAS", "MONTO POR CUOTA", "MONTO TOTAL", "MONTO PAGADO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btn_insertar_gasto.setText("Insertar");
        btn_insertar_gasto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertar_gastoActionPerformed(evt);
            }
        });

        btn_eliminar_gasto.setText("Eliminar");
        btn_eliminar_gasto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminar_gastoActionPerformed(evt);
            }
        });

        btn_pagos.setLabel("Ver Detalle");
        btn_pagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pagosActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_rubros_financiados.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        lbl_rubros_financiados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_rubros_financiados.setText("Pendientes");
        lbl_rubros_financiados.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_rubros_financiados, javax.swing.GroupLayout.PREFERRED_SIZE, 897, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_rubros_financiados)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_modificar.setText("Modificar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        btn_agregar_rubro_al_presupuesto.setLabel("Agregar al presupuesto");
        btn_agregar_rubro_al_presupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregar_rubro_al_presupuestoActionPerformed(evt);
            }
        });

        btn_sumatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sumatoriaActionPerformed(evt);
            }
        });

        jLabel1.setText("Listado de pendientes ordenados por prioridad de pago.");

        cmb_plan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "SIG. QUINCENA", "TASA0", "CREDIX", "KUIKI" }));
        cmb_plan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_planActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_insertar_gasto)
                        .addGap(2, 2, 2)
                        .addComponent(btn_modificar)
                        .addGap(2, 2, 2)
                        .addComponent(btn_eliminar_gasto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_pagos)
                        .addGap(28, 28, 28)
                        .addComponent(btn_sumatoria, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_agregar_rubro_al_presupuesto))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmb_plan, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmb_plan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_insertar_gasto)
                        .addComponent(btn_eliminar_gasto)
                        .addComponent(btn_pagos)
                        .addComponent(btn_modificar)
                        .addComponent(btn_agregar_rubro_al_presupuesto))
                    .addComponent(btn_sumatoria, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_eliminar_gastoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminar_gastoActionPerformed
        // TODO add your handling code here:        
        eliminarFinanciado();
    }//GEN-LAST:event_btn_eliminar_gastoActionPerformed

    
    public void eliminarFinanciado(){
        try {
            
            PresupuestoDAO con = PresupuestoDAO.getInstance();
            TableModel model = jTable1.getModel();
            
            int row = jTable1.getSelectedRow();
            int col = jTable1.getSelectedColumn();  

            if  (row!=-1 && col!=-1)
            {                                
                String idrubro = jTable1.getValueAt(row, 0).toString();
                String nombre = jTable1.getValueAt(row, 3).toString();


                if(JOptionPane.showConfirmDialog(null, "¿Desea eliminar el rubro '"+nombre+"'?",
                                                        "Warning",
                                                        JOptionPane.OK_CANCEL_OPTION,
                                                        JOptionPane.QUESTION_MESSAGE)
                                                        ==JOptionPane.OK_OPTION){                                                
                    
                    boolean hay = con.hayPagosAsignadosoPagados(idrubro);
                    
                    if (!hay){
                        con.borrarFinanciadoPagos(idrubro);
                        con.borrarPendientes(idrubro);                        
                        cargarPendientes();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,
                        "El pendiente no puede ser eliminado porque tiene cuotas asignadas o pagadas.");
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,
                "Debe seleccionar un rubro de la tabla.");
            }
        } catch (Exception ex) {
            DialogError error = new DialogError (null,true,ex);
            error.setVisible(true);
        } 
    }
    
    private void btn_insertar_gastoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertar_gastoActionPerformed
        // TODO add your handling code here:
        
            RubroCuota insertar = new RubroCuota (new JFrame(),true);
            insertar.setVisible(true);
            if(!insertar.cancelar)
            cargarPendientes();
        
    }//GEN-LAST:event_btn_insertar_gastoActionPerformed

    public void modificar(){
    try {
                PresupuestoDAO con = PresupuestoDAO.getInstance();
                
                TableModel model = jTable1.getModel();
                
                int row = jTable1.getSelectedRow();
                int col = jTable1.getSelectedColumn();               
                if  (row!=-1 && col!=-1)
                {                      
                    String idrubro = jTable1.getValueAt(row, 0).toString();
                    String nombre = jTable1.getValueAt(row, 2).toString();

                    PendientesObject pendiente = new PendientesObject();
                    pendiente.setIdentificador(idrubro);
                    pendiente.setNombre(nombre);
                    con.modificarPendiente(pendiente);
                }       
                
                cargarPendientes();                
            } catch (Exception ex) {
                DialogError error = new DialogError (null,true,ex);
                error.setVisible(true);
            }
    }
    
    private void btn_pagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pagosActionPerformed
        // TODO add your handling code here:
        Utilities utils = new Utilities();        
        TableModel model = jTable1.getModel();
                
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();  

        if  (row!=-1 && col!=-1)
        {           
            try {
                PendientesObject obj = new PendientesObject();
                                
                String idfinanciado = jTable1.getValueAt(row, 0).toString();
                obj.setIdentificador(idfinanciado);                           
                
                DetallePagosFinanciados pagos = new DetallePagosFinanciados (new JFrame(),true,obj,this.presupuesto,this.path);
                pagos.setVisible(true);
            } catch (Exception ex) {
                DialogError error = new DialogError (null,true,ex);         
                error.setVisible(true);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,
            "Debe seleccionar un rubro de la tabla.");
        }        
    }//GEN-LAST:event_btn_pagosActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:
        Utilities utils = new Utilities();
        TableModel model = jTable1.getModel();
        PendientesObject obj = new PendientesObject ();
                
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();  
        PresupuestoDAO con;
                           
        if  (row!=-1 && col!=-1)
        {                                
            try {
                String idrubro = jTable1.getValueAt(row, 0).toString();
                obj.setIdentificador(idrubro);

                con = PresupuestoDAO.getInstance();
                boolean hay = con.hayPagosAsignadosoPagados(idrubro);
                
                if (hay)
                {
                    JOptionPane.showMessageDialog(null,
                    "Este pendiente no puede ser modificado porque tiene Cuotas ya asignadas.");
                }
                else
                {
                    RubroCuota modificar = new RubroCuota (new JFrame(),true,obj);
                    modificar.setVisible(true);            
                    cargarPendientes();
                }
            }catch (SQLException ex) {
                DialogError error = new DialogError (null,true,ex);         
                error.setVisible(true);
            }
        }
        else
        {
        JOptionPane.showMessageDialog(null,
                "Debe seleccionar un rubro de la tabla.");
        }
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void btn_agregar_rubro_al_presupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregar_rubro_al_presupuestoActionPerformed
        // TODO add your handling code here:
        insertarRubro();
        //cargarPendientes();        
    }//GEN-LAST:event_btn_agregar_rubro_al_presupuestoActionPerformed

    private void btn_sumatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sumatoriaActionPerformed
        // TODO add your handling code here:
        btn_sumatoria();
    }//GEN-LAST:event_btn_sumatoriaActionPerformed

    private void cmb_planActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_planActionPerformed
        // TODO add your handling code here:
 try {
            PresupuestoDAO con = PresupuestoDAO.getInstance();            
            this.rowData=con.getGastosFinanciado(cmb_plan.getSelectedItem().toString());        
            actualizarTabla(this.rowData);

        } catch (Exception ex) {
             DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
        }            
        
    }//GEN-LAST:event_cmb_planActionPerformed

   public void btn_sumatoria(){
        TableModel model = jTable1.getModel();
        Utilities utils = new Utilities();
        
        int rowArr[] = jTable1.getSelectedRows();
        String monto="", saldo="";
        double sum_saldo=0, sum_monto=0, temp=0;
   
        
        for (int i=0; i<rowArr.length ; i++){
        
            if  (rowArr[i]!=-1)
            {                                
                try {
                    saldo = jTable1.getValueAt(rowArr[i], 4).toString();

                    saldo=utils.priceWithoutCommas(saldo);                                     
                    sum_saldo = sum_saldo + Double.parseDouble(saldo); 
                } catch (ParseException ex) {
                    DialogError error = new DialogError (null,true,ex);
                    error.setVisible(true);
                }

            }           
        }
        saldo = "Sumatoria: " +utils.priceWithDecimal(sum_saldo);
        
        JDialogsSumatorio s = new JDialogsSumatorio (null,true,monto,saldo);
        s.setVisible(true);
                
    }     
    public void insertarRubro(){
            String idfinanciado;
            String descripcion="";           
            Utilities utils = new Utilities();
            CuotaObject next_cuota;
            long llave=0;
            try {                

                TableModel model = jTable1.getModel();
                
                int row = jTable1.getSelectedRow();
                int col = jTable1.getSelectedColumn();  
                
                if  (row!=-1 && col!=-1)
                {               
                    
                    idfinanciado = jTable1.getValueAt(row, 0).toString();
                    insertarRubroalPresupuesto(idfinanciado, presupuesto);                                       
                }
                else
                {
                    JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un rubro de la tabla.");
                }
            } catch (Exception ex) {
                 DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
            }   
    }
    
    
    public void insertarRubroalPresupuesto(String idfinanciado,PresupuestoObject pre) throws SQLException, ParseException{           
            String descripcion="";
            
            
            Utilities utils = new Utilities();
            CuotaObject next_cuota;
            
             PresupuestoDAO con = PresupuestoDAO.getInstance();
            
            PendientesObject pen = new PendientesObject();
            
            pen = con.getPendientes(idfinanciado);
            next_cuota = con.getNextCuota(idfinanciado);

            if (next_cuota.getIdcuota()!=null)
            {        
                /*
                
                String nombre = pen.getNombre();
                String plan = pen.getPlan();
                String monto_total = pen.getMonto_total();
                String monto_cuota = pen.getMonto_cuota();
                String monto_pagado = pen.getMonto_pagado();
                String tipo_pago = pen.getTipo_pago();
                int cuotas_pagadas = Integer.parseInt(pen.getCuotas_pagadas());
                int idrubro=0;
                idrubro=con.getIDRUBRO_SEQ();

                
                rubros = new RubrosObject();
                rubros.setIdpresupuesto(pre.getIdpresupuesto());
                rubros.setMonto(monto_cuota);
                rubros.setTipo_pago(tipo_pago);

                String temp = pre.getPresupuesto();
                String arr[] = temp.split("-");
                        
                rubros.setIdentificador(String.valueOf(idrubro));  
                
                Object result;
                double montocuota;
                double total=Double.parseDouble(monto_total);
                if (plan.equals("SIG. QUINCENA"))
                {                        
                    rubros.setNombre(nombre);

                    if(JOptionPane.showConfirmDialog(null, "¿Desea pagar en su totalidad el rubro?",
                                                                            "Warning",
                                                                            JOptionPane.OK_CANCEL_OPTION,
                                                                            JOptionPane.QUESTION_MESSAGE)
                                                                            ==JOptionPane.OK_OPTION)
                    {      
                      //  se paga en la totalidad el rubro
                        rubros.setMonto(monto_total);
                        
                        
                                             
                                
                        montocuota =  Double.parseDouble(monto_total);
                        con.insertarRubro2(rubros);
                        con.insertarRubroFinanciado(idrubro,Integer.parseInt(idfinanciado));                                
                    }
                    else
                    {   
                       //se paga una parte de la totalidad del rubro
                        result = JOptionPane.showInputDialog(null, "Digite el monto a pagar:");                                
                        rubros.setMonto(result.toString());
                        montocuota =  Double.parseDouble(rubros.getMonto());

                        while (montocuota>total){
                            JOptionPane.showMessageDialog(null,
                                "El monto no puede exceder el monto total del rubro.");

                            result = JOptionPane.showInputDialog(null, "Digite el monto a pagar:");                                
                            rubros.setMonto(result.toString());
                            montocuota =  Double.parseDouble(rubros.getMonto());                                
                        }

                        con.insertarRubro2(rubros);
                        con.insertarRubroFinanciado(idrubro,Integer.parseInt(idfinanciado));
                    }
                }
                else                                
                if (!plan.equals("MANUEL")&&!plan.equals("SILVIA"))
                {
                    descripcion=nombre + " Cuota:"+ next_cuota.getDescripcion() ;                   
                    rubros.setNombre(descripcion); 

                    con.insertarRubro2(rubros);
                    con.insertarRubroFinanciado(idrubro,Integer.parseInt(idfinanciado));
                    montocuota =  Double.parseDouble(monto_cuota);
                }
                else
                {   //entra aca si es de manuel, silvia  *
                    rubros.setNombre(nombre);
                    result = JOptionPane.showInputDialog(null, "Digite el monto a pagar:");
                    montocuota =  Double.parseDouble(result.toString());                                                                       
                }

                
                
                //SE ACTUALIZA EL MONTO PAGADO
                double nuevo_montopagado = montocuota;  
                double total_pagado = nuevo_montopagado + Double.parseDouble(monto_pagado);



                CuotaObject cuota = new CuotaObject();

                cuota.setIdfinanciado(idfinanciado);
                cuota.setIdpresupuesto(pre.getIdpresupuesto());
                cuota.setIdrubro(String.valueOf(idrubro));
                cuota.setMonto( String.valueOf(montocuota));
                cuota.setFecha(utils.getDate());
                cuota.setDescripcion(descripcion);
                cuota.setEstado(CuotaObject.ASIGNADO);
                cuota.setIdcuota(next_cuota.getIdcuota() );
                con.modificarEstadoCuota(cuota);  

                if ( plan.equals("MANUEL") || plan.equals("SILVIA") )
                {
                    FinanciadoPagosObject financiadopagos_obj = new FinanciadoPagosObject();
                    financiadopagos_obj.setIdfinanciado(idfinanciado);
                    financiadopagos_obj.setIdpresupuesto(pre.getIdpresupuesto());
                    financiadopagos_obj.setIdrubro(String.valueOf(idrubro));
                    financiadopagos_obj.setMonto(String.valueOf(montocuota));
                    financiadopagos_obj.setFecha(utils.getDate());
                    financiadopagos_obj.setNcuota("1");
                    financiadopagos_obj.setEstado(CuotaObject.PAGADO);

                    con.modificarSaldodePendiente(Integer.parseInt(idfinanciado),String.valueOf(total_pagado));
                    con.insertarFinanciadoPagos(financiadopagos_obj);                                        
                }

                JOptionPane.showMessageDialog(null,
                rubros.getNombre()+" asignada.");
                
                */
                                                                                
                con.sp_insertar_pendiente_presupuesto(idfinanciado,  pre.getIdpresupuesto(), pen.getNombre(),  pen.getTipo_pago());                                
                JOptionPane.showMessageDialog(null,
                "Cuota asignada al presupuesto actual.");                
            }
            else
            {
                JOptionPane.showMessageDialog(null,
                "Todas las cuotas de este pendiente han sido asignadas.");
            }     
    }
    
    public void cargarPendientes()
    {
        try {
            PresupuestoDAO con = PresupuestoDAO.getInstance();            
            this.rowData=con.getGastosFinanciado();        
            actualizarTabla(this.rowData);

        } catch (Exception ex) {
             DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
        }    
    }

    
    public void actualizarTabla(Object[][] datos){
    
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    this.rowData,
                    this.columnNames
            ){
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false,false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
        });

            

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(110);               
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);   
        jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);


    }
        
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agregar_rubro_al_presupuesto;
    private javax.swing.JButton btn_eliminar_gasto;
    private javax.swing.JButton btn_insertar_gasto;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_pagos;
    private javax.swing.JButton btn_sumatoria;
    private javax.swing.JComboBox<String> cmb_plan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_rubros_financiados;
    // End of variables declaration//GEN-END:variables
}
