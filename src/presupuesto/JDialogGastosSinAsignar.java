/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presupuesto;
import dao.CuotaObject;
import dao.FinanciadoPagosObject;
import dao.GastoObject;
import dao.PendientesObject;
import dao.PresupuestoDAO;
import dao.PresupuestoObject;
import dao.RubrosObject;
import dao.TipoPagoObject;
import dao.TiposPagoSingleton;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.joda.time.DateTime;
/**
 *
 * @author MaFuen1
 */
public class JDialogGastosSinAsignar extends javax.swing.JDialog {

    private final int INSERTAR = 1;
    private final int MODIFICAR = 2;    
    PresupuestoObject presupuesto;
    GastoObject gastoobject;
      ImageIcon sumatoriaicon;
    
    String[] columnNames = {"IDGASTO","FECHA",
                        "LUGAR","TIPO PAGO","MONTO"           
                        };
    String rowData[][];       
    /**
     * Creates new form JDialogGastosSinAsignar
     */
    public JDialogGastosSinAsignar(java.awt.Frame parent, boolean modal,PresupuestoObject pre) {
        super(parent, modal);
        initComponents();
        sumatoriaicon =new ImageIcon(getClass().getResource("/img/sumatoria.jpg"));
        btn_sumatoria.setIcon(sumatoriaicon);
        
        
        this.presupuesto=pre;
        setLocationRelativeTo(null);
        cargarGastos();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lbl_quincena = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btn_insertar = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btn_asignar = new javax.swing.JButton();
        enviar_a_pendientes = new javax.swing.JButton();
        btn_sumatoria = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_quincena.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        lbl_quincena.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_quincena.setText("Gastos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lbl_quincena, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_quincena)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btn_insertar.setText("Insertar");
        btn_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertarActionPerformed(evt);
            }
        });

        btn_modificar.setText("Modificar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        btn_asignar.setText("Asignar");
        btn_asignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_asignarActionPerformed(evt);
            }
        });

        enviar_a_pendientes.setText("Enviar a Pendientes");
        enviar_a_pendientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviar_a_pendientesActionPerformed(evt);
            }
        });

        btn_sumatoria.setBackground(new java.awt.Color(255, 255, 255));
        btn_sumatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sumatoriaActionPerformed(evt);
            }
        });

        jLabel1.setText("Listado de gastos ejecutados sin asignar.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(btn_insertar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_sumatoria, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(255, 255, 255)
                                .addComponent(enviar_a_pendientes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_asignar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_insertar)
                        .addComponent(btn_modificar)
                        .addComponent(btn_eliminar)
                        .addComponent(btn_asignar)
                        .addComponent(enviar_a_pendientes))
                    .addComponent(btn_sumatoria, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertarActionPerformed
        // TODO add your handling code here:
        
            RubrosObject rubrosobject = new RubrosObject();
            rubrosobject.setIdentificador("0");
            rubrosobject.setIdpresupuesto(this.presupuesto.getIdpresupuesto());
            Gastos gastos = new Gastos (new JFrame(),true,this.INSERTAR,rubrosobject);
            gastos.setVisible(true); 
           
            
                     cargarGastos();
    }//GEN-LAST:event_btn_insertarActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:
        
       Utilities utils = new Utilities ();
        TableModel model = jTable1.getModel();
        GastoObject obj = new GastoObject();
        RubrosObject rubrosobject = new RubrosObject();
        rubrosobject.setIdentificador("0");
        rubrosobject.setIdpresupuesto(this.presupuesto.getIdpresupuesto());
            
            
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();  

        if  (row!=-1 && col!=-1)
        {                                
            try {                                
                String idgasto = model.getValueAt(row, 0).toString();
                String fecha = model.getValueAt(row, 1).toString();
                String lugar = model.getValueAt(row, 2).toString();
                String tipo_pago = model.getValueAt(row, 3).toString();
                String monto = utils.priceWithoutCommas(model.getValueAt(row, 4).toString());
                
                obj.setIdgasto(idgasto);
                obj.setFecha(fecha);
                obj.setLugar(lugar);
                obj.setTipo_pago(tipo_pago);
                obj.setMonto(monto);
                
                Gastos gastos = new Gastos (new JFrame(),true,this.MODIFICAR,rubrosobject,obj);
                gastos.setVisible(true);
                                                
                
                cargarGastos();
            }catch (ParseException ex) {
                               DialogError error = new DialogError (null,true,ex);         
                                error.setVisible(true);
                }
        }
        else
        {
            JOptionPane.showMessageDialog(null,
            "Debe seleccionar un gasto de la tabla.");
        }         
        
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
       try {
                Utilities utils = new Utilities();
                PresupuestoDAO con = PresupuestoDAO.getInstance();
                
                TableModel model = jTable1.getModel();
                
                int row = jTable1.getSelectedRow();
                int col = jTable1.getSelectedColumn();  
                
                if  (row!=-1 && col!=-1)
                {                                
                    String idgasto = model.getValueAt(row, 0).toString();
                    String nombre = model.getValueAt(row, 2).toString();
                    String monto = utils.priceWithoutCommas(model.getValueAt(row, 4).toString());
                    

                    if(JOptionPane.showConfirmDialog(null, "¿Desea eliminar el gasto '"+nombre+"'?",
                                                            "Warning",
                                                            JOptionPane.OK_CANCEL_OPTION,
                                                            JOptionPane.QUESTION_MESSAGE)
                                                            ==JOptionPane.OK_OPTION){                                                
                    
                    
                                                
                    con.borrarGasto(idgasto);                                                            
                    
                    cargarGastos();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un gasto de la tabla.");
                }                                    
            } catch (Exception ex) {
                DialogError error = new DialogError (null,true,ex);
                error.setVisible(true);
            }                  
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btn_asignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_asignarActionPerformed
        // TODO add your handling code here:        
      try {
                Utilities utils = new Utilities();
                PresupuestoDAO con = PresupuestoDAO.getInstance();
                
                TableModel model = jTable1.getModel();
                
                int row = jTable1.getSelectedRow();
                int col = jTable1.getSelectedColumn();  
                
                if  (row!=-1 && col!=-1)
                {                                
                    String idgasto = model.getValueAt(row, 0).toString();
                    String nombre = model.getValueAt(row, 2).toString();
                    String monto = utils.priceWithoutCommas(model.getValueAt(row, 4).toString());
                    

                    if(JOptionPane.showConfirmDialog(null, "¿Desea ASIGNAR el gasto '"+nombre+"' a un Rubro del presupuesto actual?",
                                                            "Warning",
                                                            JOptionPane.OK_CANCEL_OPTION,
                                                            JOptionPane.QUESTION_MESSAGE)
                                                            ==JOptionPane.OK_OPTION){                                                
                    
                    gastoobject = new GastoObject();
                    gastoobject.setIdgasto(idgasto);
                    gastoobject.setLugar(nombre);
                    gastoobject.setMonto(monto);
                    
                    
                    JDialogAsignar gastos = new JDialogAsignar (new JFrame(),true,this.presupuesto,gastoobject);
                    gastos.setVisible(true);
                                                                    
                    cargarGastos();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un gasto de la tabla.");
                }                                    
            } catch (Exception ex) {
                DialogError error = new DialogError (null,true,ex);
                error.setVisible(true);
            }                  
    }//GEN-LAST:event_btn_asignarActionPerformed

    private void btn_sumatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sumatoriaActionPerformed
        // TODO add your handling code here:
        btn_sumatoria();

    }//GEN-LAST:event_btn_sumatoriaActionPerformed

    private void enviar_a_pendientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviar_a_pendientesActionPerformed
        // TODO add your handling code here:
        
         PendientesObject obj = new PendientesObject ();
        Utilities utils = new Utilities();
        TableModel model = jTable1.getModel();
        
                
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();  
        
                           
        if  (row!=-1 && col!=-1)
       {                                         
            try {              
           
               obj.setFecha(jTable1.getValueAt(row, 1).toString());
                obj.setNombre(jTable1.getValueAt(row, 2).toString());
                
                String monto = jTable1.getValueAt(row, 4).toString();
                monto= utils.priceWithoutCommas(monto);                
                obj.setMonto_total( monto  );        
                obj.setMonto_cuota(monto);                
                obj.setMonto_pagado("0");
                obj.setQuincena("0");
                obj.setTipo_pago( jTable1.getValueAt(row, 3).toString());
                obj.setPlan("SIG. QUINCENA");
 

                  PresupuestoDAO con = null;

                  con = PresupuestoDAO.getInstance();
                                
                
                  insertarComoPendiente(obj);
                  
                  con.borrarGasto(jTable1.getValueAt(row, 0).toString());  
                    
                  cargarGastos();

                JOptionPane.showMessageDialog(null,
                "Gasto enviado a Pendientes para facturar la Siguiente Quicena.");
                
                
                                  
                  
            } catch (SQLException | NumberFormatException ex) {
                 DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
            } catch (ParseException ex) {                
                 DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
             }                
            
        }
         else
        {
        JOptionPane.showMessageDialog(null,
                "Debe seleccionar un gasto de la tabla.");
        }
          
        
        
    }//GEN-LAST:event_enviar_a_pendientesActionPerformed

    
public void insertarComoPendiente(PendientesObject pendientes) throws SQLException, ParseException
    {
        Date date_fechaContado;
        Date date_fechaMinimo;
        Utilities utils = new Utilities();
        PendientesObject obj = new PendientesObject ();
 
           PresupuestoDAO presupuestodao = null;

                presupuestodao = PresupuestoDAO.getInstance();
                

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                
                
                TipoPagoObject tipoPago = new TipoPagoObject();
                
                tipoPago = presupuestodao.getTipoPago2(pendientes.getTipo_pago());
                
                String diaCorte = tipoPago.getFecha_corte();
                String diasPagoContado = tipoPago.getFecha_pago_contado();
                String diasPagoMinimo =  tipoPago.getFecha_pago_minimo();
                
                String fechaCompra =pendientes.getFecha();
                String fechaCorte = diaCorte + "/" + utils.getMonth() +"/"+ utils.getYear();            

                SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");            
                Date date_fechaCorte = dateformat3.parse(fechaCorte);
                Date date_fechaCompra = dateformat3.parse(fechaCompra);

                      DateTime dt = new DateTime(date_fechaCorte);
                    date_fechaContado = dt.toDate();                        
                    date_fechaMinimo = dt.toDate();

                if(date_fechaCorte.after(date_fechaCompra) || date_fechaCorte.equals(date_fechaCompra))
                {
                 
                    dt = dt.plusDays(Integer.parseInt(diasPagoContado));
                    date_fechaContado = dt.toDate();

                    DateTime dt2 = new DateTime(date_fechaCorte);
                    dt2 = dt2.plusDays(Integer.parseInt(diasPagoMinimo));
                    date_fechaMinimo = dt2.toDate();

                }
                if(date_fechaCorte.before(date_fechaCompra)){
                    //Se debe sumar 1 mes a la fecha de corte                 
                    dt = dt.plusMonths(1);
                    date_fechaCorte = dt.toDate();

                    DateTime dt3 = new DateTime(date_fechaCorte);
                    dt3 = dt3.plusDays(Integer.parseInt(diasPagoContado));
                    date_fechaContado = dt3.toDate();                        

                    DateTime dt2 = new DateTime(date_fechaCorte);
                    dt2 = dt2.plusDays(Integer.parseInt(diasPagoMinimo));
                    date_fechaMinimo = dt2.toDate();
                }                
                                
                                                
                 pendientes.setFecha_pago_minimo(df.format(date_fechaMinimo));
                 pendientes.setFecha_pago_contado(df.format(date_fechaContado));                                

                
                long idfinanciado = presupuestodao.insertarPendientes(pendientes);            
                
               
                /*PARA MANUEL Y SILVIA NO SE GENERAN CUOTAS PORQUE NO AFECTAN EL PRESUPUESTO.*/
                
                /*Se generan las cuotas PARA SIGUIENTE QUINCENA*/
                FinanciadoPagosObject financiadopagos_obj = new FinanciadoPagosObject();
                financiadopagos_obj.setIdfinanciado(String.valueOf((int)idfinanciado));
                financiadopagos_obj.setIdpresupuesto("0");
                financiadopagos_obj.setIdrubro("0");
                financiadopagos_obj.setMonto(pendientes.getMonto_cuota());
                financiadopagos_obj.setFecha(utils.getDate());
                financiadopagos_obj.setNcuota("1");
                financiadopagos_obj.setEstado(CuotaObject.SIN_ASIGNAR);
                financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));
                
 
                presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                

               
    }
    
    
    
public void btn_sumatoria(){
        TableModel model = jTable1.getModel();
        Utilities utils = new Utilities();
        
        int rowArr[] = jTable1.getSelectedRows();
        String monto="", saldo="";
        double sum_saldo=0, sum_monto=0, temp=0;
   
        
        for (int i=0; i<rowArr.length ; i++){
        
            if  (rowArr[i]!=-1)
            {                                
                try {
                    monto = jTable1.getValueAt(rowArr[i], 4).toString();
                    
                    
                    monto=utils.priceWithoutCommas(monto);

                    sum_monto = sum_monto + Double.parseDouble(monto);
                    



                } catch (ParseException ex) {
                    DialogError error = new DialogError (null,true,ex);
                    error.setVisible(true);
                }

            }           
        }
        monto = "Monto total disponible: " +utils.priceWithDecimal(sum_monto);
        saldo = "";
        
        JDialogsSumatorio s = new JDialogsSumatorio (null,true,monto,saldo);
        s.setVisible(true);
                
    }      
   
    public void cargarGastos(){
       Utilities utils = new Utilities();
        try {
                // TODO add your handling code here:
            PresupuestoDAO con = PresupuestoDAO.getInstance();
                        

            this.rowData=con.getGastosSinAsignar();

            actualizarTabla(this.rowData);
            
        
        } catch (Exception ex) {
                   DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
        }                                
    
    }
    
    
    
   public void actualizarTabla(Object[][] datos){
       
               
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
         this.rowData,
         this.columnNames
    ){
       boolean[] canEdit = new boolean [] {
         false, false, true, false, true
     };
         @Override
         public boolean isCellEditable(int rowIndex, int columnIndex) {
             return canEdit[columnIndex];
         }   
 });
 
    jTable1.getColumnModel().getColumn(0).setMaxWidth(60);
    jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
    jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
    jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
    jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
   }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_asignar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_insertar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_sumatoria;
    private javax.swing.JButton enviar_a_pendientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_quincena;
    // End of variables declaration//GEN-END:variables
}
