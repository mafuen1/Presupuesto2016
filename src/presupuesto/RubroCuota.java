/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presupuesto;

import dao.CuotaObject;
import dao.FinanciadoPagosObject;
import dao.PendientesObject;
import dao.PresupuestoDAO;
import dao.RubrosObject;
import dao.TipoPagoObject;
import dao.TiposPagoSingleton;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.joda.time.DateTime;

/**
 *
 * @author MaFuen1
 */
public class RubroCuota extends javax.swing.JDialog {
    boolean cancelar=false;
    String path;
    PendientesObject obj;
    boolean insertar=true;
    String tiposp [];
    boolean hay=false;
    TipoPagoObject tipoPago; 

    Date date_fechaContado;
    Date date_fechaMinimo;
                    
    /**
     * Creates new form RubroCuota
     */
    public RubroCuota(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        
        Utilities utils = new Utilities();
        insertar=true;
        txt_fecha.setText(utils.getDate());  
        this.setTitle("Insertar Pendiente");
        jLabel8.setText("Insertar Pendiente");
        
        PresupuestoDAO con;
        try {
            con = PresupuestoDAO.getInstance();
            TiposPagoSingleton tipospago_singleton = TiposPagoSingleton.getInstance();
            this.tiposp = tipospago_singleton.getTiposp();
            cmb_tipo_pago1.setModel(new javax.swing.DefaultComboBoxModel(this.tiposp));
            cmb_tipo_pago1.setSelectedItem("EFECTIVO");
        }catch(Exception ex){
            DialogError error = new DialogError (null,true,ex);
            error.setVisible(true);
        }
            
        txt_nombre.requestFocus();
    }

    public RubroCuota(java.awt.Frame parent, boolean modal, PendientesObject o ) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
       
        Utilities utils = new Utilities();
        this.setTitle("Modificar Pendiente");
        jLabel8.setText("Modificar Pendiente");
        insertar=false;

        PresupuestoDAO con;
        try {
            con = PresupuestoDAO.getInstance();
            TiposPagoSingleton tipospago_singleton = TiposPagoSingleton.getInstance();
            this.tiposp = tipospago_singleton.getTiposp();
            cmb_tipo_pago1.setModel(new javax.swing.DefaultComboBoxModel(this.tiposp));
           // cmb_tipo_pago1.setSelectedItem("EFECTIVO");
                        
            this.obj = con.getPendientes(o.getIdentificador());
        }catch(Exception ex){
            DialogError error = new DialogError (null,true,ex);
            error.setVisible(true);
        }
       
        
                
        txt_fecha.setText(this.obj.getFecha());     
        txt_nombre.setText(this.obj.getNombre());
        txt_monto.setText(this.obj.getMonto_total());
        cmb_plan.setSelectedItem(this.obj.getPlan());
        cmb_tipo_pago1.setSelectedItem(this.obj.getTipo_pago());
        cmb_quincena.setSelectedIndex(Integer.parseInt(this.obj.getQuincena()));
        
        String cuotas = this.obj.getPlan();
        
        String arr [] = cuotas.split("-");
        
        if (arr.length>1){
            String arr2 []= arr[1].trim().split(" ");
            txt_cuota.setText(arr2[0].trim());
            cmb_plan.setSelectedItem(arr[0].trim());
        }
        txt_nombre.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_monto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_fecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmb_tipo_pago1 = new javax.swing.JComboBox();
        cmb_plan = new javax.swing.JComboBox();
        txt_cuota = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmb_quincena = new javax.swing.JComboBox();
        btn_insertar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insertar Gasto ");

        jLabel1.setText("Nombre");

        jLabel3.setText("Monto");
        jLabel3.setRequestFocusEnabled(false);

        jLabel6.setText("Fecha de compra");

        jLabel5.setText("Tipo de Pago");

        cmb_tipo_pago1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_tipo_pago1ActionPerformed(evt);
            }
        });

        cmb_plan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SIG. QUINCENA", "TASA0", "CREDIX", "KUIKI" }));
        cmb_plan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_planItemStateChanged(evt);
            }
        });

        txt_cuota.setEnabled(false);

        jLabel2.setText("Plan");

        jLabel4.setText("Meses plazo");
        jLabel4.setRequestFocusEnabled(false);

        jLabel7.setText("Cargar cuotas en");

        cmb_quincena.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Quincena 1", "Quincena 2" }));
        cmb_quincena.setEnabled(false);
        cmb_quincena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_quincenaActionPerformed(evt);
            }
        });

        btn_insertar.setText("Aceptar");
        btn_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertarActionPerformed(evt);
            }
        });

        btn_cancelar.setLabel("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(251, 219, 251));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Día de corte:");
        jLabel9.setName(""); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Fecha Limite pago Contado:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Fecha Limite pago Mínimo:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setText("DD/MM/AAAA");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Pago próximo:");
        jLabel13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txt_cuota)
                                .addComponent(cmb_plan, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(45, 45, 45)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmb_quincena, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmb_tipo_pago1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btn_insertar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)))
                    .addComponent(jLabel13))
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmb_plan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_cuota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmb_quincena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_tipo_pago1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(8, 8, 8)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_insertar)
                    .addComponent(btn_cancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Configuración General");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.cancelar=true;
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertarActionPerformed
        // TODO add your handling code here:
        if (insertar)
            insertarPendiente();
        else
            modificarPendiente();
    }//GEN-LAST:event_btn_insertarActionPerformed

    private void cmb_planItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_planItemStateChanged
        // TODO add your handling code here:
        cmb_tipo_pago1.setEnabled(true);
        if (cmb_plan.getSelectedItem().equals("TASA0")||
            cmb_plan.getSelectedItem().equals("CREDIX")||
            cmb_plan.getSelectedItem().equals("KUIKI"))
        {
            if (cmb_plan.getSelectedItem().equals("CREDIX")||
                cmb_plan.getSelectedItem().equals("KUIKI")){
                cmb_tipo_pago1.setSelectedItem(cmb_plan.getSelectedItem());
                cmb_tipo_pago1.setEnabled(false);
            }
                
            cmb_quincena.setEnabled(true);
            
            txt_cuota.setEnabled(true);
        }
        else
        {
            txt_cuota.setEnabled(false);
            cmb_quincena.setEnabled(false);
            
        }
    }//GEN-LAST:event_cmb_planItemStateChanged

    private void cmb_tipo_pago1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_tipo_pago1ActionPerformed
        // TODO add your handling code here:
        
       PresupuestoDAO db = null;
       Utilities utils = new Utilities();
        try {
            db = PresupuestoDAO.getInstance();           
            
            this.tipoPago = new TipoPagoObject(); 
            this.tipoPago = db.getTipoPago2(cmb_tipo_pago1.getSelectedItem().toString());
            
                       
                String diaCorte = tipoPago.getFecha_corte();
                String diasPagoContado = tipoPago.getFecha_pago_contado();
                String diasPagoMinimo =  tipoPago.getFecha_pago_minimo();
                //SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");
                //Date date_fechaCorte = dateformat3.parse(fechaCorte);

                if (diaCorte==null)
                {
                    jLabel9.setText("Fecha de Corte: No posee");
                    jLabel10.setText( "Fecha Limite pago Contado:  No posee");
                    jLabel11.setText( "Fecha Limite pago Mínimo:  No posee");
                    
                }
                else   
                {                 
                    String fechaCompra = txt_fecha.getText().trim();
                    String fechaCorte = diaCorte + "/" + utils.getMonth() +"/"+ utils.getYear();            

                    SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");            
                    Date date_fechaCorte = dateformat3.parse(fechaCorte);
                    Date date_fechaCompra = dateformat3.parse(fechaCompra);



                    if(date_fechaCorte.after(date_fechaCompra) || date_fechaCorte.equals(date_fechaCompra))
                    {
                        
                        System.out.println("1");
                        
                        jLabel9.setText( "Fecha de Corte:  "+dateformat3.format(date_fechaCorte));
                        
                        DateTime dt = new DateTime(date_fechaCorte);
                        dt = dt.plusDays(Integer.parseInt(diasPagoContado));
                        date_fechaContado = dt.toDate();

                        DateTime dt2 = new DateTime(date_fechaCorte);
                        dt2 = dt2.plusDays(Integer.parseInt(diasPagoMinimo));
                        date_fechaMinimo = dt2.toDate();
                    
                        jLabel10.setText( "Fecha Limite pago Contado:  "+dateformat3.format(date_fechaContado));
                        jLabel11.setText( "Fecha Limite pago Mínimo:  "+dateformat3.format(date_fechaMinimo));
                    }

                    if(date_fechaCorte.before(date_fechaCompra)){
                        //Se debe sumar 1 mes a la fecha de corte
                        System.out.println("2");
                        
                        DateTime dt = new DateTime(date_fechaCorte);
                        dt = dt.plusMonths(1);
                        date_fechaCorte = dt.toDate();
                        jLabel9.setText( "Fecha de Corte:  "+dateformat3.format(date_fechaCorte));
                        
                        DateTime dt3 = new DateTime(date_fechaCorte);
                        dt3 = dt3.plusDays(Integer.parseInt(diasPagoContado));
                        date_fechaContado = dt3.toDate();                        

                        DateTime dt2 = new DateTime(date_fechaCorte);
                        dt2 = dt2.plusDays(Integer.parseInt(diasPagoMinimo));
                        date_fechaMinimo = dt2.toDate();


                        jLabel10.setText( "Fecha Limite pago Contado:  "+dateformat3.format(date_fechaContado));
                        jLabel11.setText( "Fecha Limite pago Mínimo:  "+dateformat3.format(date_fechaMinimo));
                    }
                }                
                        
        }catch (Exception ex){
                DialogError error = new DialogError (null,true,ex);
                error.setVisible(true);
        }        
    }//GEN-LAST:event_cmb_tipo_pago1ActionPerformed

    private void cmb_quincenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_quincenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_quincenaActionPerformed

    public void insertarPendiente(){
       PendientesObject pendientes = new PendientesObject();
       String descripcion="";
       Utilities utils = new Utilities();
       
       if ( txt_nombre.getText().trim().equals("")||txt_monto.getText().trim().equals(""))
        {
        JOptionPane.showMessageDialog(null,
                "Debe especificar todos los valores solicitados.");
        }
        else
        {
            PresupuestoDAO presupuestodao = null;
            try {
                presupuestodao = PresupuestoDAO.getInstance();
                
                pendientes.setFecha(txt_fecha.getText());
                pendientes.setNombre(txt_nombre.getText());
                pendientes.setMonto_total(txt_monto.getText());                
                String cuotas=cmb_plan.getSelectedItem().toString();              
                pendientes.setPlan(cuotas);
                
                pendientes.setQuincena(String.valueOf(cmb_quincena.getSelectedIndex()));
                
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                if(date_fechaMinimo!=null){                
                    pendientes.setFecha_pago_minimo(df.format(date_fechaMinimo));
                    pendientes.setFecha_pago_contado(df.format(date_fechaContado));
                }
                else
                {
                    SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");            
                    Date date_fechaEfectivo = dateformat3.parse(utils.getDate());
                    
                    DateTime dt = new DateTime(date_fechaEfectivo);                        
                    date_fechaContado = dt.toDate();                        
                    date_fechaMinimo = dt.toDate();
                        
                    pendientes.setFecha_pago_minimo(df.format(date_fechaMinimo));
                    pendientes.setFecha_pago_contado(df.format(date_fechaContado));
                }
                
                double monto = Double.parseDouble(txt_monto.getText().toString().trim());                    
                double monto_cuota=0.0;
                double ncuota=0;
                /*
                    SI ES TASA0 O CREDIX. ENTRA AL IF.
                */                
                if (cmb_plan.getSelectedItem().toString().equals("TASA0")||
                        cmb_plan.getSelectedItem().toString().equals("KUIKI")||
                        cmb_plan.getSelectedItem().toString().equals("CREDIX")
                        )
                { 
                                      
                    ncuota = Double.parseDouble(txt_cuota.getText()) ;
                    pendientes.setPlan(cuotas+" - "+ncuota+" MESES");
                    
                    if (cmb_quincena.getSelectedItem().equals("Quincena 1")||cmb_quincena.getSelectedItem().equals("Quincena 2"))                    
                        monto_cuota = monto/ncuota;
                    else
                        monto_cuota = (monto/ncuota)/2;
                    
                    pendientes.setMonto_cuota(String.valueOf(monto_cuota));
                }                
                
                if (cmb_plan.getSelectedItem().toString().equals("MANUEL")||cmb_plan.getSelectedItem().toString().equals("SILVIA"))
                    pendientes.setMonto_cuota("0");
                if (cmb_plan.getSelectedItem().toString().equals("SIG. QUINCENA"))
                    pendientes.setMonto_cuota(txt_monto.getText());

                
                pendientes.setTipo_pago(cmb_tipo_pago1.getSelectedItem().toString());              
                long idfinanciado = presupuestodao.insertarPendientes(pendientes);            
                
               
                /*PARA MANUEL Y SILVIA NO SE GENERAN CUOTAS PORQUE NO AFECTAN EL PRESUPUESTO.*/
                
                /*Se generan las cuotas PARA SIGUIENTE QUINCENA*/
                FinanciadoPagosObject financiadopagos_obj = new FinanciadoPagosObject();
                financiadopagos_obj.setIdfinanciado(String.valueOf((int)idfinanciado));
                financiadopagos_obj.setIdpresupuesto("0");
                financiadopagos_obj.setIdrubro("0");
                financiadopagos_obj.setMonto(pendientes.getMonto_cuota());
                financiadopagos_obj.setFecha(utils.getDate());
                financiadopagos_obj.setNcuota("1");
                financiadopagos_obj.setEstado(CuotaObject.SIN_ASIGNAR);
                financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));
                
                if (cmb_plan.getSelectedItem().toString().equals("SIG. QUINCENA"))
                {
                    presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                
                } 
                
                /*Se generan las cuotas para los programas de credito*/
                if (cmb_plan.getSelectedItem().toString().equals("TASA0")||
                        cmb_plan.getSelectedItem().toString().equals("KUIKI")||
                        cmb_plan.getSelectedItem().toString().equals("CREDIX")
                        )
                {   
                                        
                    if (cmb_quincena.getSelectedItem().equals("Quincena 1")||cmb_quincena.getSelectedItem().equals("Quincena 2"))                    
                    {
                        int j=1;
                        for (; j<=ncuota; j++)
                        {                                
                            financiadopagos_obj.setNcuota(String.valueOf(j));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);
                            monto = monto - monto_cuota; 
                            
                            DateTime dt = new DateTime(date_fechaContado);
                            dt = dt.plusMonths(1);
                            date_fechaContado = dt.toDate();
                            
                            dt = new DateTime(date_fechaMinimo);
                            dt = dt.plusMonths(1);
                            date_fechaMinimo = dt.toDate();
                            
                            financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                            financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));                                                                            
                        }   
                        if (monto!=0){
                            financiadopagos_obj.setNcuota(String.valueOf(j)); 
                            financiadopagos_obj.setMonto(String.valueOf(monto));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                        
                        }                        
                    }
                    else
                    {   int j=1;                        
                        for (; j<=ncuota; j++)
                        {   /*
                            Se insertan dos porque son dos quincenas.
                            */  
                            financiadopagos_obj.setNcuota(String.valueOf(j));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                            
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);
                            monto = monto - monto_cuota; 
                            monto = monto - monto_cuota; 
                            
                            DateTime dt = new DateTime(date_fechaContado);
                            dt = dt.plusMonths(1);
                            date_fechaContado = dt.toDate();
                            
                            dt = new DateTime(date_fechaMinimo);
                            dt = dt.plusMonths(1);
                            date_fechaMinimo = dt.toDate();
                            
                            financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                            financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));                
                                                            
                            
                        } 
                        if (monto!=0){
                            financiadopagos_obj.setNcuota(String.valueOf(j)); 
                            financiadopagos_obj.setMonto(String.valueOf(monto));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                        
                        }                         
                    }
                }
                
                
                this.setVisible(false);
            } catch (ParseException | SQLException | NumberFormatException ex) {
                 DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
            }                      
        }
    }
 

    

    public void modificarPendiente(){
      PendientesObject pendientes = new PendientesObject();
       Utilities utils = new Utilities();
      
       if ( txt_nombre.getText().trim().equals("")||txt_monto.getText().trim().equals(""))
        {
        JOptionPane.showMessageDialog(null,
                "Debe especificar todos los valores solicitados.");
        }
        else
        {
            PresupuestoDAO presupuestodao = null;
            try {
                presupuestodao = PresupuestoDAO.getInstance();
                
                pendientes.setIdentificador(this.obj.getIdentificador());
                pendientes.setFecha(txt_fecha.getText());
                pendientes.setNombre(txt_nombre.getText());
                pendientes.setMonto_total(txt_monto.getText());                
                String plan=cmb_plan.getSelectedItem().toString();      
                
                if (plan.equals("SIG. QUINCENA"))
                     pendientes.setQuincena("0");
               else
                     pendientes.setQuincena(String.valueOf(cmb_quincena.getSelectedIndex()));
                
                pendientes.setPlan(plan);
               
                

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                if(date_fechaMinimo!=null){                
                    pendientes.setFecha_pago_minimo(df.format(date_fechaMinimo));
                    pendientes.setFecha_pago_contado(df.format(date_fechaContado));
                }
                else
                {
                    SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");            
                    Date date_fechaEfectivo = dateformat3.parse(utils.getDate());
                    
                    DateTime dt = new DateTime(date_fechaEfectivo);                        
                    date_fechaContado = dt.toDate();                        
                    date_fechaMinimo = dt.toDate();
                        
                    pendientes.setFecha_pago_minimo(df.format(date_fechaMinimo));
                    pendientes.setFecha_pago_contado(df.format(date_fechaContado));
                }                
                
                double monto = Double.parseDouble(txt_monto.getText().toString().trim());
                double monto_cuota=0.0;
                double ncuota=0;
                
                /*
                si es tasa0, credix o kuiki
                */
                if (cmb_plan.getSelectedItem().toString().equals("TASA0")||
                        cmb_plan.getSelectedItem().toString().equals("KUIKI")||
                        cmb_plan.getSelectedItem().toString().equals("CREDIX")
                        )
                { 
                    ncuota = Double.parseDouble(txt_cuota.getText()) ;
                    pendientes.setPlan(plan+" - "+ncuota+" MESES");                    
                    
                    if (cmb_quincena.getSelectedItem().equals("Quincena 1")||cmb_quincena.getSelectedItem().equals("Quincena 2"))
                        monto_cuota = monto/ncuota; 
                    else
                        monto_cuota = (monto/ncuota)/2; 
                    
                    pendientes.setMonto_cuota(String.valueOf(monto_cuota));
                }                
                
                if (cmb_plan.getSelectedItem().toString().equals("MANUEL")||cmb_plan.getSelectedItem().toString().equals("SILVIA"))
                    pendientes.setMonto_cuota("0");
                if (cmb_plan.getSelectedItem().toString().equals("SIG. QUINCENA"))
                    pendientes.setMonto_cuota(txt_monto.getText());
                
                    
                
                pendientes.setTipo_pago(cmb_tipo_pago1.getSelectedItem().toString());              
                presupuestodao.modificarPendiente2(pendientes);            
                
                presupuestodao.borrarFinanciadoPagos(pendientes.getIdentificador());
                                            
                /*Se generan las cuotas PARA SIGUIENTE QUINCENA*/      
                
                FinanciadoPagosObject financiadopagos_obj = new FinanciadoPagosObject();
                financiadopagos_obj.setIdfinanciado(pendientes.getIdentificador());
                financiadopagos_obj.setIdpresupuesto("0");
                financiadopagos_obj.setIdrubro("0");
                financiadopagos_obj.setMonto(pendientes.getMonto_cuota());
                financiadopagos_obj.setFecha(utils.getDate());
                financiadopagos_obj.setNcuota("1");
                financiadopagos_obj.setEstado(CuotaObject.SIN_ASIGNAR);
                financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));                
                if (cmb_plan.getSelectedItem().toString().equals("SIG. QUINCENA"))
                {
                    presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                
                } 
                
                /*Se generan las cuotas para los programas de credito*/
                if (cmb_plan.getSelectedItem().toString().equals("TASA0")||
                        cmb_plan.getSelectedItem().toString().equals("KUIKI")||
                        cmb_plan.getSelectedItem().toString().equals("CREDIX")
                        )
                {   
                                        
                    if (cmb_quincena.getSelectedItem().equals("Quincena 1")||cmb_quincena.getSelectedItem().equals("Quincena 2"))                    
                    {
                        int j=1;
                        for (; j<=ncuota; j++)
                        {                     
                            financiadopagos_obj.setNcuota(String.valueOf(j));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);
                            monto = monto - monto_cuota;   
                            
                            DateTime dt = new DateTime(date_fechaContado);
                            dt = dt.plusMonths(1);
                            date_fechaContado = dt.toDate();
                            
                            dt = new DateTime(date_fechaMinimo);
                            dt = dt.plusMonths(1);
                            date_fechaMinimo = dt.toDate();
                            
                            financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                            financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));                
                                    
                        }    
                        
                        if (monto!=0){
                            financiadopagos_obj.setNcuota(String.valueOf(j)); 
                            financiadopagos_obj.setMonto(String.valueOf(monto));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                        
                        }
                    }
                    else
                    {    
                        int j=1;
                        for (; j<=ncuota; j++)
                        {   /*
                            Se insertan dos porque son dos quincenas.
                            */             
                            financiadopagos_obj.setNcuota(String.valueOf(j));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                            
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);
                            monto = monto - monto_cuota; 
                            monto = monto - monto_cuota; 
                            
                            DateTime dt = new DateTime(date_fechaContado);
                            dt = dt.plusMonths(1);
                            date_fechaContado = dt.toDate();
                            
                            dt = new DateTime(date_fechaMinimo);
                            dt = dt.plusMonths(1);
                            date_fechaMinimo = dt.toDate();
                            
                            financiadopagos_obj.setFecha_pago_minimo(df.format(date_fechaMinimo));
                            financiadopagos_obj.setFecha_pago_contado(df.format(date_fechaContado));                
                                                            
                        }  
                        if (monto!=0){
                            financiadopagos_obj.setNcuota(String.valueOf(j)); 
                            financiadopagos_obj.setMonto(String.valueOf(monto));
                            presupuestodao.insertarFinanciadoPagos(financiadopagos_obj);                        
                        }                        
                    }
                }                
                
                this.setVisible(false);
            } catch (ParseException | SQLException | NumberFormatException ex) {
                 DialogError error = new DialogError (null,true,ex);
                   error.setVisible(true);
            }


            
        }
    }  
    
    

    public void getFechaPago(String fechaCompra, String idtipoPago){
       PresupuestoDAO db = null;
       Utilities utils = new Utilities();
        try {
            db = PresupuestoDAO.getInstance();
        
            tipoPago = new TipoPagoObject();            
            tipoPago = db.getTipoPago(idtipoPago);
            
            String fechaCorte = tipoPago.getFecha_corte();
            
            SimpleDateFormat dateformat3 = new SimpleDateFormat("dd/MM/yyyy");

            Date date_fechaCorte = dateformat3.parse(fechaCorte);

            Date date_fechaCompra = dateformat3.parse(fechaCompra);

            
            //Si aun no ha cortado la tarjeta
            if(date_fechaCorte.after(date_fechaCompra)){
                System.out.println("La tarjeta aun no corta.");
                System.out.println("Cortara el:"+fechaCorte);
            }

            if(date_fechaCorte.before(date_fechaCompra)){
                System.out.println("Date1 is before Date2");
            }

            if(date_fechaCorte.equals(date_fechaCompra)){
                System.out.println("Date1 is equal Date2");
            }
            
                
            
            
        
        }catch (Exception ex){
                DialogError error = new DialogError (null,true,ex);
                error.setVisible(true);
        } 
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_insertar;
    private javax.swing.JComboBox cmb_plan;
    private javax.swing.JComboBox cmb_quincena;
    private javax.swing.JComboBox cmb_tipo_pago1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField txt_cuota;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_monto;
    private javax.swing.JTextField txt_nombre;
    // End of variables declaration//GEN-END:variables
}
